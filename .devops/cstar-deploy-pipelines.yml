# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

parameters:
  - name: 'executeBuild'
    displayName: 'Launch gradle and docker build'
    type: boolean
    default: true
  - name: 'includeUat'
    display: 'Include build and deploy to UAT'
    type: boolean
    default: true

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - src/*
      - build.gradle
      - Dockerfile
      - Dockerfile.native
      - settings.gradle
      - helm/*

pr: none

resources:
  - repo: self

variables:

  vmImageNameDefault: 'ubuntu-latest'

  deployNamespace: '$(DEPLOY_NAMESPACE)'
  helmReleaseName : '$(HELM_RELEASE_NAME)'
  devContainerRegistry: '$(DEV_CONTAINER_REGISTRY_SERVICE_CONN)'
  uatContainerRegistry: '$(UAT_CONTAINER_REGISTRY_SERVICE_CONN)'

stages:
  - stage: 'project_version'
    displayName: Get app version
    jobs:
      - job: ProjectVersion
        displayName: Gradle project version
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: JavaToolInstaller@0
            displayName: Install Java
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
          - task: Bash@3
            displayName: Get Project version
            name: getprojectversion
            condition: succeeded()
            inputs:
              targetType: 'inline'
              script: |
                version=$(./gradlew properties -q | grep "version:" | awk '{print $2}')
                echo "##vso[task.setvariable variable=outputProjectVersion;isOutput=true]$version"
              failOnStderr: true

  - stage: 'build'
    displayName: 'Build and Publish'
    dependsOn: 'project_version'
    variables:
      projectVersion: $[ stageDependencies.project_version.ProjectVersion.outputs['getprojectversion.outputProjectVersion'] ]
    jobs:
      - job: Build_Dev
        displayName: "Build and publish to DEV"
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: Docker@2
            condition: and(succeeded(), ${{ parameters.executeBuild }})
            displayName: 'Publish image to DEV'
            inputs:
              containerRegistry: $(devContainerRegistry)
              repository: '$(K8S_IMAGE_REPOSITORY_NAME)'
              command: 'buildAndPush'
              Dockerfile: 'Dockerfile'
              tags: |
                $(Build.BuildId)
                latest
                $(projectVersion)
      - job: Build_Uat
        displayName: "Build and publish to UAT"
        condition: and(succeeded(), ${{ parameters.includeUat }})
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: Docker@2
            condition: and(succeeded(), ${{ parameters.executeBuild }})
            displayName: 'Publish image to UAT'
            inputs:
              containerRegistry: $(uatContainerRegistry)
              repository: '$(K8S_IMAGE_REPOSITORY_NAME)'
              command: 'buildAndPush'
              Dockerfile: 'Dockerfile'
              tags: |
                $(Build.BuildId)
                latest
                $(projectVersion)

  - stage: 'publish_artifact_helm'
    displayName: 'Publish artifact Helm'
    dependsOn: ['build']
    jobs:
      - job: Publish_artifact_helm
        displayName: Publish_artifact_helm
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Artifact manifests'
            condition: succeeded()
            inputs:
              targetPath: '$(Build.Repository.LocalPath)/helm/rtd'
              artifact: 'helm'
              publishLocation: 'pipeline'

  - stage: 'deploy_dev'
    displayName: 'Deploy to DEV K8S'
    dependsOn: [ 'publish_artifact_helm' ]
    condition: succeeded()
    variables:
      projectVersion: $[ stageDependencies.project_version.ProjectVersion.outputs['getprojectversion.outputProjectVersion'] ]
    jobs:
      - deployment: 'Deploy_to_dev'
        displayName: 'Deploy to DEV K8S'
        pool:
          name: $(DEV_AGENT_POOL)
        environment:
          name: "DEV"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: 'helm'
                    targetPath: '$(Pipeline.Workspace)/helm/rtd'
                - task: Bash@3
                  name: helm_dependency_build
                  displayName: Helm dependency build
                  inputs:
                    workingDirectory: '$(Pipeline.Workspace)/helm/rtd'
                    targetType: 'inline'
                    script: |
                      helm repo add pagopa-microservice https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build
                    failOnStderr: true
                - task: Bash@3
                  name: helm_template
                  displayName: Helm template
                  inputs:
                    workingDirectory: '$(Pipeline.Workspace)/helm/rtd'
                    targetType: 'inline'
                    script: |
                      helm template . -f values-dev.yaml
                    failOnStderr: true
                - task: HelmDeploy@0
                  displayName: Helm upgrade
                  inputs:
                    kubernetesServiceEndpoint: '$(DEV_KUBERNETES_SERVICE_CONN)'
                    namespace: '$(deployNamespace)'
                    command: upgrade
                    chartType: filepath
                    chartPath: $(Pipeline.Workspace)/helm/rtd
                    chartName: ${{ variables.helmReleaseName }}
                    releaseName: ${{ variables.helmReleaseName }}
                    valueFile: "$(Pipeline.Workspace)/helm/rtd/values-dev.yaml"
                    install: true
                    waitForExecution: true
                    arguments: "--timeout 5m00s --debug"

  - stage: 'deploy_uat'
    displayName: 'Deploy to UAT K8S'
    dependsOn: ['publish_artifact_helm']
    condition: and(succeeded(), eq(variables.includeUat, true))
    variables:
      projectVersion: $[ stageDependencies.project_version.ProjectVersion.outputs['getprojectversion.outputProjectVersion'] ]
    jobs:
      - deployment: 'Deploy_to_uat'
        displayName: 'Deploy to UAT K8S'
        pool:
          name: $(UAT_AGENT_POOL)
        environment: 
          name: "UAT"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: 'helm'
                    targetPath: '$(Pipeline.Workspace)/helm/rtd'
                - task: Bash@3
                  name: helm_dependency_build
                  displayName: Helm dependency build
                  inputs:
                    workingDirectory: '$(Pipeline.Workspace)/helm/rtd'
                    targetType: 'inline'
                    script: |
                      helm repo add pagopa-microservice https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build
                    failOnStderr: true
                - task: Bash@3
                  name: helm_template
                  displayName: Helm template
                  inputs:
                    workingDirectory: '$(Pipeline.Workspace)/helm/rtd'
                    targetType: 'inline'
                    script: |
                      helm template . -f values-uat.yaml
                    failOnStderr: true
                - task: HelmDeploy@0
                  displayName: Helm upgrade
                  inputs:
                    kubernetesServiceEndpoint: '$(UAT_KUBERNETES_SERVICE_CONN)'
                    namespace: '$(deployNamespace)'
                    command: upgrade
                    chartType: filepath
                    chartPath: $(Pipeline.Workspace)/helm/rtd
                    chartName: ${{ variables.helmReleaseName }}
                    releaseName: ${{ variables.helmReleaseName }}
                    valueFile: "$(Pipeline.Workspace)/helm/rtd/values-uat.yaml"
                    install: true
                    waitForExecution: true
                    arguments: "--timeout 5m00s --debug"
